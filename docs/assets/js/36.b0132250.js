(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{309:function(c,t,e){"use strict";e.r(t);var i=e(14),n=Object(i.a)({},(function(){var c=this,t=c._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":c.$parent.slotKey}},[t("p",[c._v("Để mô hình hóa gần hơn với phần cứng. SystemC cung cấp hai loại vector logic: sc_bv<W> (bit vector) và sc_lv<W> (logic vector), và một loại logic đơn bit là sc_logic.")]),c._v(" "),t("p",[t("img",{attrs:{src:"/img/systemc/5_data_type/image_3_3_0.png",alt:"image_3_3_0"}})]),c._v(" "),t("p",[c._v("ref: "),t("a",{attrs:{href:"https://www.chipverify.com/images/verilog/values.png",target:"_blank",rel:"noopener noreferrer"}},[c._v("https://www.chipverify.com/images/verilog/values.png"),t("OutboundLink")],1)]),c._v(" "),t("p",[c._v("Các loại vector logic của SystemC được thiết kế để mô hình hóa gần với RTL (hạn chế: không thực hiện các phép toán số học).\nChúng thực hiện đầy đủ các phép gán và phép toán logic, với một số hạn chế.")]),c._v(" "),t("p",[c._v("Ví dụ, một sc_lv<W> với các giá trị bit high-z hoặc không xác định (x) không thể gán cho một sc_bv<W> mà không mất một số thông tin.")]),c._v(" "),t("h1",{attrs:{id:"_1-sc-bv-w-kieu-du-lieu-vector-bit-cua-systemc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sc-bv-w-kieu-du-lieu-vector-bit-cua-systemc"}},[c._v("#")]),c._v(" 1. sc_bv<W> Kiểu dữ liệu vector bit của SystemC")]),c._v(" "),t("p",[t("img",{attrs:{src:"/img/systemc/5_data_type/image_3_3_1.png",alt:"image_3_3_1"}})]),c._v(" "),t("p",[c._v("Cách khai báo: "),t("code",[c._v("sc_bv<BITWIDTH> NAME;")])]),c._v(" "),t("p",[c._v("sc_bv<W>, có các khả năng tương tự như sc_lv<W> nhưng giá trị bit bị giới hạn ở logic 0 hoặc logic 1.\nsc_bv<W> là một lớp mẫu mà W xác định độ rộng bit.")]),c._v(" "),t("p",[c._v("Các phép toán vector bit của SystemC bao gồm tất cả các toán tử bitwise-and, bitwise-or và bitwise-xor thông thường (&, |, ^). Ngoài việc chọn bit và phạm vi bit (với [] và range()), sc_bv<W> còn hỗ trợ API cho các phép toán and_reduce(), or_reduce(), nand_reduce(), nor_reduce(), xor_reduce() và xnor_reduce().")]),c._v(" "),t("ul",[t("li",[t("p",[c._v("ví dụ:")]),c._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[c._v('   sc_bv\\<7\\> mask = "0100111"; // khai báo 7 bit sc_bv\n   sc_bv\\<8\\> value ="11101111";  khai báo 8 bit sc_bv\n   sc_bv\\<7\\> active = value & mask; // 0100111\n   sc_bv\\<1\\> data_all = active.and_reduce(); // SC_LOGIC_0\n    /// value :" "111[01]111"    \n   value.range(4,3) = "01";// 00001\n    /// value : "111[0]1111"  \n   value[4] = active[0];\n')])])])])]),c._v(" "),t("h1",{attrs:{id:"_2-sc-logic-va-sc-lv-w"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-sc-logic-va-sc-lv-w"}},[c._v("#")]),c._v(" 2. sc_logic và sc_lv<W>")]),c._v(" "),t("p",[t("img",{attrs:{src:"/img/systemc/5_data_type/image_3_3_2.png",alt:"image_3_3_2"}})]),c._v(" "),t("p",[c._v("Thú vị hơn các kiểu dữ liệu Boolean (0,1) là các kiểu dữ liệu bốn giá trị (0,1,x,z) được sử dụng để biểu diễn các điều kiện không xác định và trở kháng cao (tri-state) (rõ hơn bạn tham khảo verilog nhé).\nSystemC sử dụng sc_logic và sc_lv<W> để biểu diễn các kiểu dữ liệu này. Trạng thái logic của các kiểu dữ liệu này được biểu diễn như sau:")]),c._v(" "),t("p",[c._v("•\t 0 - SC_LOGIC_0, Log_0, or ‘0’")]),c._v(" "),t("p",[c._v("•\t 1 - SC_LOGIC_1, Log_1, or ‘1’")]),c._v(" "),t("p",[c._v("•\t z - SC_LOGIC_Z, Log_Z, ‘Z’ or ‘z’")]),c._v(" "),t("p",[c._v("•\t x - SC_LOGIC_X, Log_X, ‘X’ or ‘x’")]),c._v(" "),t("p",[c._v("Do chi phí xử lý (vì các kiểu dữ liệu này có thể xem như là 1 class trong C++), các kiểu dữ liệu này chậm hơn đáng kể so với bool và sc_bv.")]),c._v(" "),t("p",[c._v("Kiểu dữ liệu sc_logic là phiên bản đơn bit của lớp mẫu sc_lv<W> mà tham số mẫu duy nhất là độ rộng bit (W).")]),c._v(" "),t("p",[c._v("cách khai báo:")]),c._v(" "),t("p",[t("code",[c._v("sc_logic NAME;")])]),c._v(" "),t("p",[t("code",[c._v("sc_lv<BITWIDTH> NAME;")])]),c._v(" "),t("p",[c._v("Tương tự như sc_bv<W>.Các phép toán trong vector logic của SystemC bao gồm tất cả các toán tử bitwise-and, bitwise-or và bitwise-xor thông thường (&, |, ^).\nNgoài việc chọn bit và phạm vi bit ([] và range()), sc_lv<W> còn hỗ trợ các phép toán and_reduce(), or_reduce(), nand_reduce(), nor_reduce(), xor_reduce() và xnor_reduce().")]),c._v(" "),t("p",[c._v("Ref: "),t("a",{attrs:{href:"https://eda-playground.readthedocs.io/en/latest/_static/systemc-2.3.1/sysc/a00026.html#ad63355747d6f0cddcc9a3770b554bbd6",target:"_blank",rel:"noopener noreferrer"}},[c._v("https://eda-playground.readthedocs.io/en/latest/_static/systemc-2.3.1/sysc/a00026.html#ad63355747d6f0cddcc9a3770b554bbd6"),t("OutboundLink")],1)]),c._v(" "),t("h2",{attrs:{id:"systemc-home"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#systemc-home"}},[c._v("#")]),c._v(" "),t("RouterLink",{attrs:{to:"/danh-muc/systemc.html"}},[c._v("SystemC Home")])],1)])}),[],!1,null,null,null);t.default=n.exports}}]);